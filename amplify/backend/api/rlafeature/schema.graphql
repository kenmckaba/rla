enum PollMode {
  NONE
  POLL
  SHOWRESULTS
}

enum TrainingType {
  TEMP
  TRAINING
  BREAKOUT
  SERIES
  TEMPSERIES
}

enum ClassPreference {
  NONE
  ONLINE
  INPERSON
}

type Trainer @model {
  id: ID!
  name: String!
  email: String!
}

type Training
  @model
  @auth(
    rules: [{ allow: private, provider: iam }, { allow: public, provider: iam, operations: [read] }]
  ) {
  id: ID!
  seriesId: ID
  type: TrainingType!
  trainerId: ID
  title: String!
  seriesTitle: String
  description: String
  trainerName: String
  trainerEmail: String
  registrationUrl: String
  maxAttendees: Int
  minInPersonAttendees: Int
  maxInPersonAttendees: Int
  maxOnlineAttendees: Int
  meetingId: String!
  moderatorPasscode: String!
  participantPasscode: String!
  scheduledTime: AWSDateTime!
  startedAt: AWSDateTime
  endedAt: AWSDateTime
  audioHardMuted: Boolean
  videoHardMuted: Boolean
  audioStateKey: Int
  videoStateKey: Int
  pollMode: PollMode
  currentPollId: ID
  whiteboardUrl: String
  whiteboardShared: Boolean
  breakoutInProgress: Boolean
  attendees: [Attendee] @hasMany(indexName: "TrainingAttendees", fields: ["id"])
  chatMessages: [ChatMessage] @hasMany(indexName: "chatMessageByTrainingId", fields: ["id"])
  polls: [Poll] @hasMany(indexName: "byTraining", fields: ["id"])
  sharedDocs: [SharedDoc] @hasMany(indexName: "TrainingDocs", fields: ["id"])
  breakoutRooms: [BreakoutRoom] @hasMany(indexName: "TrainingBreakoutRooms", fields: ["id"])
}

type Attendee
  @model
  @auth(rules: [{ allow: private, provider: iam }, { allow: public, provider: iam }]) {
  id: ID!
  name: String!
  email: String!
  classPreference: ClassPreference
  bluejeansName: String
  handRaised: Boolean
  joinedTime: AWSDateTime
  leftTime: AWSDateTime
  currentMood: String
  posePitch: Int
  poseYaw: Int
  poseRole: Int
  audioUnmuted: Boolean
  videoUnmuted: Boolean
  audioStateKey: Int
  videoStateKey: Int
  audioHardMuted: Boolean
  videoHardMuted: Boolean
  trainingId: ID! @index(name: "TrainingAttendees")
  training: Training @belongsTo(fields: ["trainingId"])
  breakoutRoomId: ID @index(name: "BreakoutAttendees")
  breakoutRoom: BreakoutRoom @belongsTo(fields: ["breakoutRoomId"])
  breakoutRoomAttendeeId: ID
  mainTrainingAttendeeId: ID
}

type SharedDoc
  @model
  @auth(
    rules: [{ allow: private, provider: iam }, { allow: public, provider: iam, operations: [read] }]
  ) {
  id: ID!
  title: String!
  type: String
  url: String!
  shared: Boolean
  trainingId: ID! @index(name: "TrainingDocs")
  training: Training
}

enum PollType {
  SINGLECHOICE
  MULTICHOICE
  TEXT
}

type Poll
  @model
  @auth(
    rules: [{ allow: private, provider: iam }, { allow: public, provider: iam, operations: [read] }]
  ) {
  id: ID!
  question: String!
  type: PollType!
  answers: [String]
  correctAnswerIndex: Int
  trainingId: ID! @index(name: "byTraining")
  startedAt: AWSDateTime
  stoppedAt: AWSDateTime
  multiAnswerIndexes: [Int]
  responses: [PollResponse] @hasMany(indexName: "pollPollResponses", fields: ["id"])
}

type StoredPoll @model @auth(rules: [{ allow: private, provider: iam }]) {
  id: ID!
  tags: String
  question: String!
  type: PollType!
  answers: [String]
}

type PollResponse
  @model
  @auth(rules: [{ allow: private, provider: iam }, { allow: public, provider: iam }]) {
  id: ID!
  attendeeId: ID!
  pollId: ID! @index(name: "pollPollResponses")
  response: [String]!
  poll: Poll @belongsTo(fields: ["pollId"])
}

type ChatMessage
  @model
  @auth(rules: [{ allow: private, provider: iam }, { allow: public, provider: iam }]) {
  id: ID!
  content: String!
  timeSent: AWSDateTime!
  fromId: ID!
  toId: ID!
  trainingId: ID! @index(name: "chatMessageByTrainingId")
}

type StudentGroup @model @auth(rules: [{ allow: private, provider: iam }]) {
  id: ID!
  name: String!
  numStudents: Int
  students: [Students] @hasMany(indexName: "byGroup", fields: ["id"])
}

type Students @model @auth(rules: [{ allow: private, provider: iam }]) {
  id: ID!
  groupId: ID! @index(name: "byGroup")
  group: StudentGroup @belongsTo(fields: ["groupId"])
  firstName: String!
  lastName: String!
  email: String!
}

type InvitedStudent
  @model
  @auth(rules: [{ allow: private, provider: iam }, { allow: public, provider: iam }]) {
  id: ID!
  trainingId: ID!
  timeSent: AWSDateTime
  name: String
  email: String
  attendeeId: ID
  attendee: Attendee @hasOne(fields: ["attendeeId"])
}

type EmailContent @model @auth(rules: [{ allow: private, provider: iam }]) {
  id: ID!
  registrationBody: String!
  registrationSubject: String!
  joinBody: String!
  joinSubject: String!
  cancelBody: String!
  cancelSubject: String!
}

type BreakoutRoom
  @model
  @auth(
    rules: [{ allow: private, provider: iam }, { allow: public, provider: iam, operations: [read] }]
  ) {
  id: ID!
  name: String
  bluejeansMeetingId: String!
  bluejeansModeratorPasscode: String!
  bluejeansParticipantPasscode: String!
  attendees: [Attendee] @hasMany(indexName: "BreakoutAttendees", fields: ["id"])
  trainingId: ID! @index(name: "TrainingBreakoutRooms")
  training: Training
  breakoutTrainingId: ID
}

type Subscription {
  onUpdateAttendeeByTrainingId(trainingId: ID!): Attendee
    @aws_subscribe(mutations: ["updateAttendee"])
  onCreateChatMessageByTrainingId(trainingId: ID!): ChatMessage
    @aws_subscribe(mutations: ["createChatMessage"])
}
