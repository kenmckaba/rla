import { gql, useLazyQuery, useMutation } from '@apollo/client'
import { Center, Button, VStack, Text } from '@chakra-ui/react'
import { useEffect, useRef, useState } from 'react'
import { updateStudentGroup } from '../graphql/mutations'

// copied from graphql/queries.js which are generated by amplify
// we're only concerned with the id of the groups
// and the count of students, so these retrieve only the id
const listStudentGroups = /* GraphQL */ `
  query ListStudentGroups($filter: ModelStudentGroupFilterInput, $limit: Int, $nextToken: String) {
    listStudentGroups(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
      }
      nextToken
    }
  }
`

const listStudents = /* GraphQL */ `
  query ListStudents($filter: ModelStudentsFilterInput, $limit: Int, $nextToken: String) {
    listStudents(filter: $filter, limit: $limit, nextToken: $nextToken) {
      items {
        id
      }
      nextToken
    }
  }
`
export const Fix = () => {
  const [queryGroups, { data: groupListData }] = useLazyQuery(gql(listStudentGroups))
  const [getGroupStudents, { data: studentData }] = useLazyQuery(gql(listStudents))
  const [updateGroup] = useMutation(gql(updateStudentGroup))
  const [count, setCount] = useState(0)
  const [inProgress, setInProgress] = useState(false)
  const [isDone, setIsDone] = useState(false)
  const groupPromise = useRef()
  const groupIdInProgress = useRef()

  useEffect(() => {
    const processGroup = async (students) => {
      const numStudents = students?.length || 0
      const groupId = groupIdInProgress.current
      await updateGroup({
        variables: {
          input: {
            id: groupId,
            numStudents,
          },
        },
      })
      setCount((prev) => prev + 1)
      groupPromise.current()
    }

    if (studentData) {
      const students = studentData.listStudents.items
      processGroup(students)
    }
  }, [studentData, updateGroup])

  useEffect(() => {
    const fixGroups = async (groups) => {
      for await (const group of groups) {
        groupIdInProgress.current = group.id
        const promise = new Promise((resolve) => {
          groupPromise.current = resolve
        })
        getGroupStudents({
          variables: {
            limit: 1000,
            filter: { groupId: { eq: group.id } },
          },
        })
        // can do only 1 query at a time so wait until students arrive
        await promise
      }
      setIsDone(true)
    }

    if (groupListData) {
      const groups = groupListData.listStudentGroups.items
      fixGroups(groups)
    }
  }, [getGroupStudents, groupListData])

  const go = async () => {
    setInProgress(true)
    await queryGroups()
  }

  return (
    <Center>
      <VStack color="black">
        <Text>Updates email groups' student count</Text>
        <Button isDisabled={inProgress} onClick={go}>
          Go
        </Button>
        {inProgress && <Text>Procesing group {count}</Text>}
        {isDone && <Text>Done</Text>}
      </VStack>
    </Center>
  )
}
